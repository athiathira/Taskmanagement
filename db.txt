CREATE DATABASE SalesManagementDB;


-- Switch to the new database
USE SalesManagementDB;

-- Customers table
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255),
    email VARCHAR(255),
    phone VARCHAR(20),
    address VARCHAR(255),
    city VARCHAR(100),
    country VARCHAR(100)
);

-- Create ProductCategories table
CREATE TABLE ProductCategories (
    category_id INT PRIMARY KEY,
    category_name VARCHAR(255)
);

-- Create Products table
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    category_id INT,
    unit_price DECIMAL(10, 2),
    cost_price DECIMAL(10, 2),
    description TEXT,
    FOREIGN KEY (category_id) REFERENCES ProductCategories(category_id)
);

-- Create Orders table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    region VARCHAR(100),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Create OrderDetails table
CREATE TABLE OrderDetails (
    order_detail_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    unit_price DECIMAL(10, 2),
    discount DECIMAL(3, 2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Insert  ProductCategories
INSERT INTO ProductCategories (category_id, category_name) VALUES (1, 'Electronics');
INSERT INTO ProductCategories (category_id, category_name) VALUES (2, 'Books');

-- Insert o Products
INSERT INTO Products (product_id, product_name, category_id, unit_price, cost_price, description) VALUES (1, 'Laptop', 1, 1000.00, 800.00, 'A high-performance laptop');
INSERT INTO Products (product_id, product_name, category_id, unit_price, cost_price, description) VALUES (2, 'Smartphone', 1, 500.00, 300.00, 'A latest model smartphone');
INSERT INTO Products (product_id, product_name, category_id, unit_price, cost_price, description) VALUES (3, 'Novel', 2, 20.00, 10.00, 'A popular novel');

-- Insert  Customers
INSERT INTO Customers (customer_id, customer_name, email, phone, address, city, country) VALUES (1, 'John Doe', 'john.doe@example.com', '1234567890', '123 Elm St', 'Phoenix ', 'USA');
INSERT INTO Customers (customer_id, customer_name, email, phone, address, city, country) VALUES (2, 'Jane Smith', 'jane.smith@example.com', '0987654321', '456 Oak St', 'Toronto', 'Canada');

-- Insert Orders
INSERT INTO Orders (order_id, customer_id, order_date, total_amount, region) VALUES (1, 1, '2023-01-15', 1500.00, 'North America');
INSERT INTO Orders (order_id, customer_id, order_date, total_amount, region) VALUES (2, 2, '2023-01-17', 20.00, 'North America');

-- Insert  OrderDetails
INSERT INTO OrderDetails (order_detail_id, order_id, product_id, quantity, unit_price, discount) VALUES (1, 1, 1, 1, 1000.00, 0.00);
INSERT INTO OrderDetails (order_detail_id, order_id, product_id, quantity, unit_price, discount) VALUES (2, 1, 2, 1, 500.00, 0.00);
INSERT INTO OrderDetails (order_detail_id, order_id, product_id, quantity, unit_price, discount) VALUES (3, 2, 3, 1, 20.00, 0.00);


--Total Sales by Product Category:
SELECT 
    pc.category_name, 
    SUM(od.quantity * od.unit_price) AS TotalSalesAmount
FROM 
    OrderDetails od
JOIN 
    Products p ON od.product_id = p.product_id
JOIN 
    ProductCategories pc ON p.category_id = pc.category_id
GROUP BY 
    pc.category_name;



--Product-wise Profit Margin
	SELECT 
    p.product_name,
    SUM(od.quantity * od.unit_price) AS SalesAmount,
    SUM(od.quantity * p.cost_price) AS Cost,
    SUM(od.quantity * (od.unit_price - p.cost_price)) AS Profit
FROM 
    OrderDetails od
JOIN 
    Products p ON od.product_id = p.product_id
GROUP BY 
    p.product_name;



--Top-selling Item in Each Category:
	SELECT 
    pc.category_name,
    p.product_name,
    SUM(od.quantity) AS TotalQuantity
FROM 
    OrderDetails od
JOIN 
    Products p ON od.product_id = p.product_id
JOIN 
    ProductCategories pc ON p.category_id = pc.category_id
GROUP BY 
    pc.category_name, p.product_name
HAVING 
    SUM(od.quantity) = (
        SELECT 
            MAX(TotalQuantity)
        FROM (
            SELECT 
                pc.category_name,
                p.product_name,
                SUM(od.quantity) AS TotalQuantity
            FROM 
                OrderDetails od
            JOIN 
                Products p ON od.product_id = p.product_id
            JOIN 
                ProductCategories pc ON p.category_id = pc.category_id
            GROUP BY 
                pc.category_name, p.product_name
        ) AS SubQuery
        WHERE SubQuery.category_name = pc.category_name
    );



--List of Products with No Sales:
SELECT  
	p.product_id,  
	p.product_name, 
	p.category_id, 
	p.unit_price, 
	p.cost_price, 
	p.description
FROM Products p
    LEFT JOIN OrderDetails od ON p.product_id = od.product_id
WHERE 
    od.product_id IS NULL;



--List of Customers Who Have Not Received Any Discounts:
SELECT DISTINCT 
    c.customer_id, 
    c.customer_name
FROM 
    Customers c
JOIN 
    Orders o ON c.customer_id = o.customer_id
JOIN 
    OrderDetails od ON o.order_id = od.order_id
WHERE 
    od.discount = 0;
